(defun evaluate (tokens)
  (progn
    (= stack '())
    (= ops '())
    (defun apply-op ()
      (progn
        (= b (pop stack))
        (= a (pop stack))
        (= op (pop ops))
        (if (eq op "+") (push stack (+ a b)))
        (if (eq op "-") (push stack (- a b)))
        (if (eq op "*") (push stack (* a b)))
        (if (eq op "/") (push stack (/ a b)))
      )
    )
    (defun get-precedence (op)
      (if (|| (eq op "+") (eq op "-")) 1 (if (|| (eq op "*") (eq op "/")) 2) 0)
    )

    (= i 0)
    (while (< i (length tokens))
      (progn
        (= token (list-ref tokens i))
        (if (is-int-string token)
            (push (stack (parse-int token)))
            (if (eq token "(")
                (push ops token)
                (if (eq token ")")
                    (progn
                      (= j 0)
                      (while (&& (not (eq (list-ref ops j) "(")) (< j (length ops)))
                        (progn
                          (apply-op)
                          (= j (+ j 1))
                        )
                      )
                    )
                    (progn
                      (while (&& (not (eq (list-ref ops 0) "(")) (< (get-precedence token) (get-precedence (list-ref ops 0))))
                        (progn
                          (apply-op)
                        )
                      )
                      (push ops token)
                    )
                  )
                )
            )
        )
      )
      (= k 0)
      (while (< k (length ops))
        (progn
          (apply-op)
          (= k (+ k 1))
        )
      )
    (list-ref stack 0)
  )
)

(defun tokenize (expr)
  (progn
    (= result '())
    (= token "")
    (= i 0)
    (while (< i (length expr))
      (progn
        (= char (list-ref expr i))
        (if (eq char " ")
            (progn
              (if (not (eq token ""))
                  (progn
                    (push result token)
                    (= token "")
                  )
              )
            )
            (progn
              (if (|| (eq char "+") (eq char "-") (eq char "*") (eq char "/") (eq char "(") (eq char ")"))
                  (progn
                    (if (not (eq token ""))
                        (progn
                          (push result token)
                          (= token "")
                        )
                    )
                    (push result char)
                  )
                  (progn
                    (= token (concat token char))
                  )
              )
            )
        )
        (= i (+ i 1))
      )
    )
    (result)
  )
)

(defun calc (expression)
  (progn
    (evaluate (tokenize (remove-whitespaces expression)))
  )
)

(print (calc "1 + 2"))
(print (calc "1 * 2 + (4 * 4) * (3 + 1 + 2)"))
